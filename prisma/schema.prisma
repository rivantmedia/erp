generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Employee {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  employeeId      Int       @unique
  fname           String
  lname           String
  email           String    @unique
  department      String
  contact         Int
  title           String
  role            Role     @relation(fields: [roleId], references: [id])
  sAdmin          Boolean
  roleId          String    @db.ObjectId
  type            String?
  status          String?
  location        String?
  appliedOn       DateTime?
  cvFile          String?
  doj             DateTime?
  contractEndDate DateTime?
  dateOfLeaving   DateTime?
  contract        String?
  personalMail    String?
  personalPhone   Int?
  whatsapp        Int?
  photo           String?
  upiId           String?
  dob             DateTime?
  aadhar          Int?
  PAN             String?
  bank            String?
  bankingName     String?
  accountNo       Int?
  ifsc            String?
  avgScore        Int?
  retainChoice    String?
  extEligible     Boolean?
  assignedTasks   Task[]    @relation("AssignedTasks")
  createdTasks    Task[]    @relation("CreatedTasks")
}

model Asset {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  assetId    Int     @unique
  name       String
  assignedTo Int?
  condition  String
  project    String?
  qrCodeUrl  String
}

model Task {
  id              String       @id @default(auto()) @map("_id") @db.ObjectId
  project         String
  name            String
  description     String
  summary         String
  start           DateTime
  end             DateTime
  assigneeId      String       @db.ObjectId
  creatorId       String       @db.ObjectId
  assignee        Employee     @relation("AssignedTasks", fields: [assigneeId], references: [id])
  creator         Employee     @relation("CreatedTasks", fields: [creatorId], references: [id])
  calendarEventId String
  Submissions     Submission[]
}

model Submission {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  submissionDate DateTime
  note           String
  status         String
  remarks        String?
  taskId         String   @db.ObjectId
  task           Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

model Document {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  templateId  String
  newRefId    String
  documentUrl String
}

model Role {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  index       Int        @unique
  name        String
  permissions Int
  Employee    Employee[]
}
